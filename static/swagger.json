{
    "openapi": "3.0.0",
    "info": {
        "description": "Minesweeper Backend with Flask",
        "version": "1.0.0",
        "title": "Buscaminas PvP with Flask",
        "contact":{
            "email": "ricardo.gambini18@outlook.com"
        },
        "license":{
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "tags":[
        {
            "name": "Info request",
            "description": "API for requesting users info and records"
        }
    ],
    "paths":{
        "/api/users": {
            "post": {
                "tags":[
                    "Info request"
                ],
                "summary": "Creates new users",
                "requestBody": {
                    "description": "Info request post object",
                    "required": true,
                    "content": {
                        "application/json":{
                            "schema":{
                                "$ref": "#/components/schemas/user"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201":{
                        "description": "OK",
                        "schema":{
                            "$ref": "#/components/schemas/id"
                        }
                    },
                    "400":{
                        "description": "Failed. Incorrect user data."
                    }
                }
            }
        },
        "/api/users/{id}": {
            "parameters": [
                {
                    "name":"id",
                    "in": "path",
                    "required": true,
                    "description": "User ID we want to find.",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Info request"
                ],
                "summary": "Get a user with given ID",
                "parameters":[
                    {
                        "in":"path",
                        "name":"id",
                        "required":true,
                        "description":"User ID",
                        "schema":{
                            "$ref":"#/components/schemas/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description":"OK",
                        "schema":{
                            "$ref": "#/components/schemas/user"
                        }
                    },
                    "400": {
                        "description": "Failed. Misunderstood Request."
                    },
                    "404": {
                        "description": "Failed. User not found."
                    }
                }
            }
        },
        "/api/feedback": {
            "post": {
                "tags":[
                    "Info request"
                ],
                "summary":"Creates feedback",
                "requestBody":{
                    "description":"Feedback post object",
                    "required":true,
                    "content":{
                        "application/json":{
                            "schema":{
                                "$ref": "#/components/schemas/feedback"
                            }
                        }
                    }
                },
                "produces":[
                    "application/json"
                ],
                "responses":{
                    "201":{
                        "description":"OK",
                        "schema":{
                            "$ref": "#/components/schemas/id"
                        }
                    },
                    "400":{
                        "description":"Failed. Incorrect feedback data."
                    }
                }
            }
        },
        "/api/ranking": {
            "post":{
                "tags":[
                    "Info request"
                ],
                "summary":"Saves users records",
                "requestBody":{
                    "description":"Record request post object",
                    "required":true,
                    "content":{
                        "application/json":{
                            "schema":{
                                "$ref": "#/components/schemas/ranking"
                            }
                        }
                    }
                },
                "produces":[
                    "application/json"
                ],
                "responses":{
                    "201":{
                        "description":"OK",
                        "schema":{
                            "$ref": "#/components/schemas/id"
                        }
                    },
                    "400":{
                        "description":"Failed. Incorrect record data."
                    }
                }
            },
            "get":{
                "tags":[
                    "Info request"
                ],
                "summary":"Returns records",
                "responses":{
                    "200":{
                        "description":"OK",
                        "schema":{
                            "$ref": "#/components/schemas/ranking"
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "user": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type":"string"
                    },
                    "email": {
                        "type":"string"
                    },
                    "img": {
                        "type":"string"
                    }
                }
            },
            "id": {
                "properties": {
                    "id": {
                        "type": "string"
                    }
                }
            },
            "feedback": {
                "properties": {
                    "name": {
                        "type":"string"
                    },
                    "email": {
                        "type":"string"
                    },
                    "message": {
                        "type":"string"
                    }
                }
            },
            "ranking": {
                "properties": {
                    "username": {
                        "type":"string"
                    },
                    "time": {
                        "type":"integer"
                    },
                    "img": {
                        "type":"string"
                    }
                }
            }
        }
    }
}